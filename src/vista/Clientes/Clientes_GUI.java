/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Clientes;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.EnviarGMail;
import logica.LogicaCliente;
import logica.LogicaComun;
import logica.MetodosUtiles;
import modelo.Cliente;

/**
 *
 * @author IVÁN-PC
 */
public class Clientes_GUI extends javax.swing.JPanel implements MetodosUtiles {

    private DefaultTableModel tabModel;
    private List<Cliente> tClientes;

    //Esta variable sirve para cuando cargamos un usuario de la tabla poder almacenar la ruta de su imagen
    //en caso de que la cambiemos él programa la tendrá almacenada para poder borrarla al Editarlo.
    private String URLImagenAntigua;

    public Clientes_GUI() {
        initComponents();
        tabModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabModel.setColumnIdentifiers(new Object[]{"DNI", "Nombre", "Dirección", "Teléfono", "Email"});
        tabClientes.setModel(tabModel);
        URLImagenAntigua = null;
    }

    public void mostrar() {
        setVisible(true);
        txtDni.requestFocusInWindow();
        this.requestFocus();
        mostrarListadoClientes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labCabecera = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabClientes = new javax.swing.JTable();
        panelDatosPersonales = new javax.swing.JPanel();
        labDni = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        labNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        labDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        labTelefono = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        labEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        panelImagen = new javax.swing.JPanel();
        labFoto = new javax.swing.JLabel();
        labPath = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        butExaminar = new javax.swing.JButton();
        panelBotonesFuncionales = new javax.swing.JPanel();
        butAgregar = new javax.swing.JButton();
        butEliminar = new javax.swing.JButton();
        butLimpiar = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(785, 530));
        setMinimumSize(new java.awt.Dimension(785, 530));
        setName("Clientes"); // NOI18N
        setPreferredSize(new java.awt.Dimension(785, 530));

        labCabecera.setBackground(new java.awt.Color(255, 51, 51));
        labCabecera.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        labCabecera.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labCabecera.setText("CLIENTES");
        labCabecera.setOpaque(true);

        tabClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabClientes.getTableHeader().setResizingAllowed(false);
        tabClientes.getTableHeader().setReorderingAllowed(false);
        tabClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabClientesMousePressed(evt);
            }
        });
        tabClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabClientesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabClientes);

        panelDatosPersonales.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Personales"));
        panelDatosPersonales.setToolTipText("");
        panelDatosPersonales.setName("Pepe"); // NOI18N

        labDni.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labDni.setText("DNI:");

        txtDni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDniFocusLost(evt);
            }
        });

        labNombre.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labNombre.setText("Nombre:");

        labDireccion.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labDireccion.setText("Dirección:");

        labTelefono.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labTelefono.setText("Teléfono:");

        labEmail.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        labEmail.setText("Email:");

        javax.swing.GroupLayout panelDatosPersonalesLayout = new javax.swing.GroupLayout(panelDatosPersonales);
        panelDatosPersonales.setLayout(panelDatosPersonalesLayout);
        panelDatosPersonalesLayout.setHorizontalGroup(
            panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                        .addComponent(labDni, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(labNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(labDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(labTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(labEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelDatosPersonalesLayout.setVerticalGroup(
            panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labDni)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labDireccion)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labTelefono)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelImagen.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Imagen"));
        panelImagen.setMaximumSize(new java.awt.Dimension(363, 168));
        panelImagen.setMinimumSize(new java.awt.Dimension(363, 168));

        labFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labFoto.setMaximumSize(new java.awt.Dimension(100, 100));
        labFoto.setMinimumSize(new java.awt.Dimension(100, 100));
        labFoto.setPreferredSize(new java.awt.Dimension(100, 100));

        labPath.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labPath.setText("Path:");

        txtPath.setEditable(false);
        txtPath.setBackground(new java.awt.Color(153, 153, 153));

        butExaminar.setText("jButton5");
        butExaminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butExaminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagenLayout.createSequentialGroup()
                .addGroup(panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImagenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labPath)
                        .addGap(18, 18, 18)
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelImagenLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(labFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagenLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(labFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labPath)
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(butExaminar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelBotonesFuncionales.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        butAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconsButtons/butAgregar.png"))); // NOI18N
        butAgregar.setText("Agregar");
        butAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFuncionalesActionPerformed(evt);
            }
        });

        butEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconsButtons/butEliminar.png"))); // NOI18N
        butEliminar.setText("Eliminar");
        butEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFuncionalesActionPerformed(evt);
            }
        });

        butLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconsButtons/butLimpiar.png"))); // NOI18N
        butLimpiar.setText("Limpiar");
        butLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFuncionalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesFuncionalesLayout = new javax.swing.GroupLayout(panelBotonesFuncionales);
        panelBotonesFuncionales.setLayout(panelBotonesFuncionalesLayout);
        panelBotonesFuncionalesLayout.setHorizontalGroup(
            panelBotonesFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesFuncionalesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(butAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonesFuncionalesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        panelBotonesFuncionalesLayout.setVerticalGroup(
            panelBotonesFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesFuncionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butLimpiar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labCabecera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(panelDatosPersonales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelBotonesFuncionales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(58, 58, 58))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelBotonesFuncionales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelDatosPersonales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Carga todos los Doctores en la JTable
    private void mostrarListadoClientes() {
        try {
            limpiarTabla();
            tabClientes.setModel(tabModel);
            tClientes = new ArrayList<>();
            LogicaCliente.listadoCliente(tClientes);

            for (Cliente c : tClientes) {
                tabModel.addRow(new Object[]{
                    c.getDni(),
                    c.getNombre(),
                    c.getDireccion(),
                    c.getTelefono(),
                    c.getEmail(),
                    c.getRutaFoto()}
                );
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    //Limpia la tabla
    private void limpiarTabla() {
        int cantidadFilas = tabModel.getRowCount();

        if (cantidadFilas != 0) {
            for (int i = cantidadFilas - 1; i >= 0; i--) {
                tabModel.removeRow(i);
            }
        }
    }

    //Limpia todos los campos
    private void limpiarCampos() {
        txtDni.setText("");
        txtDni.setBackground(Color.white);
        txtNombre.setText("");
        txtNombre.setBackground(Color.white);
        txtDireccion.setText("");
        txtDireccion.setBackground(Color.white);
        txtTelefono.setText("");
        txtTelefono.setBackground(Color.white);
        txtEmail.setText("");
        txtEmail.setBackground(Color.white);
        txtPath.setText("");
        labFoto.setIcon(null);
        labFoto.setText("");
    }

    //¿Faltan datos obligatorios?
    private String faltanDatosObligatorios() {

        String datosObligatorios = "";

        if (txtDni.getText().equals("")) {
            datosObligatorios += "\nDNI";
            txtDni.setBackground(new Color(255, 0, 0, 65));
        } else {
            txtDni.setBackground(Color.white);
        }

        if (txtNombre.getText().equals("")) {
            datosObligatorios += "\nNombre";
            txtNombre.setBackground(new Color(255, 0, 0, 65));
        } else {
            txtNombre.setBackground(Color.white);
        }

        if (txtDireccion.getText().equals("")) {
            datosObligatorios += "\nDirección";
            txtDireccion.setBackground(new Color(255, 0, 0, 65));
        } else {
            txtDireccion.setBackground(Color.white);
        }

        if (txtTelefono.getText().equals("")) {
            datosObligatorios += "\nTeléfono";
            txtTelefono.setBackground(new Color(255, 0, 0, 65));
        } else {
            txtTelefono.setBackground(Color.white);
        }

        return datosObligatorios;
    }

    //Métodos de los botones funcionales Agregar, Eliminar y Limpiar
    private void butFuncionalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFuncionalesActionPerformed

        if (evt.getSource() == butAgregar) {
            try {

                String datosObligatorios = faltanDatosObligatorios();

                if (!datosObligatorios.equals("")) {
                    JOptionPane.showMessageDialog(this,
                            "Error. Faltan datos obligatorios!!" + datosObligatorios,
                            getName(),
                            JOptionPane.WARNING_MESSAGE);
                } else {

                    Cliente c = new Cliente();
                    c.setDni(txtDni.getText());
                    c.setNombre(txtNombre.getText());
                    c.setDireccion(txtDireccion.getText());
                    c.setTelefono(txtTelefono.getText());
                    c.setEmail(txtEmail.getText());

                    String rutaRelativa = null;

                    if (!txtPath.getText().equals("")) {
                        rutaRelativa = LogicaComun.conseguirRutaRelativa(txtPath.getText(), LogicaComun.DUEÑOFOTO.CLIENTE);
                    }

                    c.setRutaFoto(rutaRelativa);

                    boolean existeCliente = LogicaCliente.existeCliente(c);

                    if (existeCliente) {

                        
                        int op = JOptionPane.showConfirmDialog(this,
                                "¿¿ATENCIÓN. DNI ya registrado. Quiere sobreescribir los datos??",
                                getName(),
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE);

                        switch (op) {
                            case JOptionPane.YES_OPTION:
                                
                                Cliente cTMP = new Cliente();
                                cTMP.setDni(c.getDni());
                                cTMP = LogicaCliente.getCliente(cTMP);
                                
                                LogicaCliente.editarCliente(c);
                                
                                if(!cTMP.getEmail().equals(c.getEmail()) && !c.getEmail().equals("")){
                                    EnviarGMail.enviarConGMail(c.getEmail(), EnviarGMail.asuntoBienvenida(), EnviarGMail.mensajeBienvenida(c.getDni(), c.getNombre()));
                                }

                                if (rutaRelativa != null) {
                                    LogicaComun.copiarFoto(txtPath.getText(), rutaRelativa, URLImagenAntigua);

                                    JOptionPane.showMessageDialog(this,
                                            "Edición de cliente correcta!!",
                                            getName(),
                                            JOptionPane.INFORMATION_MESSAGE);

                                }
                                limpiarCampos();
                                break;
                        }
                    } else {
                        URLImagenAntigua = null;
                        LogicaCliente.altaCliente(c);
                        
                        if(!c.getEmail().equals("")){
                            EnviarGMail.enviarConGMail(c.getEmail(), EnviarGMail.asuntoBienvenida(), EnviarGMail.mensajeBienvenida(c.getDni(), c.getNombre()));
                        }

                        if (rutaRelativa != null) {
                            LogicaComun.copiarFoto(txtPath.getText(), rutaRelativa, URLImagenAntigua);
                        }
                        limpiarCampos();

                        JOptionPane.showMessageDialog(this,
                                "Alta de cliente correcta!!",
                                getName(),
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (Exception ex) {
                System.out.println(
                        ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        getName(),
                        JOptionPane.WARNING_MESSAGE);
            }
            mostrarListadoClientes();

        } else if (evt.getSource() == butEliminar) {
            Cliente c = new Cliente();
            c.setDni(txtDni.getText());

            if (tabClientes.getSelectedRowCount() != 0) {
                try {
                    Cliente newCliente = LogicaCliente.getCliente(c);

                    if (newCliente != null) {
                        LogicaCliente.bajaCliente(c);

                        if (newCliente.getRutaFoto() != null) {
                            LogicaComun.eliminarFoto(newCliente.getRutaFoto());
                        }

                        JOptionPane.showMessageDialog(this,
                                "Baja de cliente correcta. DNI: " + c.getDni(),
                                getName(),
                                JOptionPane.WARNING_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "ERROR. No existe ningún cliente con este DNI: " + c.getDni(),
                                getName(),
                                JOptionPane.WARNING_MESSAGE);
                    }
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane.showMessageDialog(this,
                            ex.getMessage(),
                            getName(),
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "ERROR. No hay ningún cliente seleccionado!!",
                        getName(),
                        JOptionPane.WARNING_MESSAGE);
            }
            limpiarCampos();
            mostrarListadoClientes();
        } else if (evt.getSource() == butLimpiar) {
            limpiarCampos();
            mostrarListadoClientes();
        }
    }//GEN-LAST:event_butFuncionalesActionPerformed

    //Carga los datos desde la fila del JTable seleccionada a los JTextField
    private void cargarCliente(Cliente c) {
        limpiarCampos();
        txtDni.setText(c.getDni());
        txtNombre.setText(c.getNombre());
        txtDireccion.setText(c.getDireccion());
        txtTelefono.setText(c.getTelefono());
        txtEmail.setText(c.getEmail());

        String rutaFoto = c.getRutaFoto();

        if (rutaFoto != null) {
            URLImagenAntigua = c.getRutaFoto();
            txtPath.setText(rutaFoto);
            txtPath.setCaretPosition(0);
            Image img = new ImageIcon(rutaFoto).getImage();
            ImageIcon img2 = new ImageIcon(img.getScaledInstance(100, 100, Image.SCALE_SMOOTH));
            labFoto.setIcon(img2);
        } else {
            labFoto.setIcon(null);
            labFoto.setText("No Imagen!!");
        }
    }

    //Diferentes eventos para cargar los doctores dentro del JTable
    private void tabClientesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabClientesMousePressed
        int i = tabClientes.getSelectedRow();
        Cliente c = tClientes.get(i);
        cargarCliente(c);
    }//GEN-LAST:event_tabClientesMousePressed

    private void tabClientesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabClientesKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int i = tabClientes.getSelectedRow();
            Cliente c = tClientes.get(i);
            cargarCliente(c);
        }
    }//GEN-LAST:event_tabClientesKeyReleased

    private void txtDniFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDniFocusLost
        Cliente c = new Cliente();
        c.setDni(txtDni.getText());

        try {
            if (LogicaCliente.existeCliente(c)) {
                c = LogicaCliente.getCliente(c);
                cargarCliente(c);
            } else {
                String dniTMP = txtDni.getText();
                limpiarCampos();
                txtDni.setText(dniTMP);
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_txtDniFocusLost

    //Botón Examinar con su JFileChooser
    private void butExaminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butExaminarActionPerformed

        JFileChooser jf = new JFileChooser();
        jf.showOpenDialog(this);
        File archivo = jf.getSelectedFile();
        if (archivo != null) {
            txtPath.setText(archivo.getPath());
            txtPath.setCaretPosition(0);
            Image img = new ImageIcon(txtPath.getText()).getImage();
            ImageIcon img2 = new ImageIcon(img.getScaledInstance(100, 100, Image.SCALE_SMOOTH));
            labFoto.setIcon(img2);
        }
    }//GEN-LAST:event_butExaminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAgregar;
    private javax.swing.JButton butEliminar;
    private javax.swing.JButton butExaminar;
    private javax.swing.JButton butLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labCabecera;
    private javax.swing.JLabel labDireccion;
    private javax.swing.JLabel labDni;
    private javax.swing.JLabel labEmail;
    private javax.swing.JLabel labFoto;
    private javax.swing.JLabel labNombre;
    private javax.swing.JLabel labPath;
    private javax.swing.JLabel labTelefono;
    private javax.swing.JPanel panelBotonesFuncionales;
    private javax.swing.JPanel panelDatosPersonales;
    private javax.swing.JPanel panelImagen;
    private javax.swing.JTable tabClientes;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPath;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
