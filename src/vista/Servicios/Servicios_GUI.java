/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.Servicios;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import logica.CallBack;
import logica.LogicaDoctor;
import logica.LogicaServicio;
import logica.MetodosUtiles;
import modelo.Doctor;
import modelo.Servicio;
import vista.Doctores.ElegirDoctor_GUI;

/**
 *
 * @author IV√ÅN-PC
 */
public class Servicios_GUI extends javax.swing.JPanel implements MetodosUtiles, CallBack {

    private DefaultTableModel tabModel;
    private List<Servicio> tServicios;

    public Servicios_GUI() {
        initComponents();
        tabModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tabModel.setColumnIdentifiers(new Object[]{"ID", "Nombre", "Precio", "DNI Doctor"});
        tabServicios.setModel(tabModel);
        try {
            txtID.setText(String.valueOf(LogicaServicio.conseguirID()));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    public void mostrar() {
        setVisible(true);
        mostrarListadoServicios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labCabecera = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabServicios = new javax.swing.JTable();
        panelDatosPersonales = new javax.swing.JPanel();
        labID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        labNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        labPrecio = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        panelImagen = new javax.swing.JPanel();
        labFoto = new javax.swing.JLabel();
        labDniDoctor = new javax.swing.JLabel();
        txtDniDoctor = new javax.swing.JTextField();
        butBuscarDoctor = new javax.swing.JButton();
        panelBotonesFuncionales = new javax.swing.JPanel();
        butAgregar = new javax.swing.JButton();
        butEliminar = new javax.swing.JButton();
        butLimpiar = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(785, 530));
        setMinimumSize(new java.awt.Dimension(785, 530));
        setName("Servicios"); // NOI18N
        setPreferredSize(new java.awt.Dimension(785, 530));

        labCabecera.setBackground(new java.awt.Color(153, 255, 102));
        labCabecera.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 24)); // NOI18N
        labCabecera.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labCabecera.setText("SERVICIOS");
        labCabecera.setOpaque(true);

        tabServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabServicios.setName(""); // NOI18N
        tabServicios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabServicios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabServicios.getTableHeader().setResizingAllowed(false);
        tabServicios.getTableHeader().setReorderingAllowed(false);
        tabServicios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tabServiciosMousePressed(evt);
            }
        });
        tabServicios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabServiciosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabServicios);

        panelDatosPersonales.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Personales"));
        panelDatosPersonales.setToolTipText("");
        panelDatosPersonales.setName("Pepe"); // NOI18N

        labID.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labID.setText("ID:");

        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(153, 153, 153));

        labNombre.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labNombre.setText("Nombre:");

        labPrecio.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labPrecio.setText("Precio:");

        javax.swing.GroupLayout panelDatosPersonalesLayout = new javax.swing.GroupLayout(panelDatosPersonales);
        panelDatosPersonales.setLayout(panelDatosPersonalesLayout);
        panelDatosPersonalesLayout.setHorizontalGroup(
            panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                        .addComponent(labID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                        .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(labNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                                .addComponent(labPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelDatosPersonalesLayout.setVerticalGroup(
            panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDatosPersonalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelDatosPersonalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labPrecio)
                    .addComponent(txtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelImagen.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Doctor Asginado"));
        panelImagen.setMaximumSize(new java.awt.Dimension(363, 168));
        panelImagen.setMinimumSize(new java.awt.Dimension(363, 168));

        labFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labFoto.setMaximumSize(new java.awt.Dimension(100, 100));
        labFoto.setMinimumSize(new java.awt.Dimension(100, 100));
        labFoto.setPreferredSize(new java.awt.Dimension(100, 100));

        labDniDoctor.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        labDniDoctor.setText("DNI Doctor:");

        txtDniDoctor.setEditable(false);
        txtDniDoctor.setBackground(new java.awt.Color(153, 153, 153));

        butBuscarDoctor.setText("jButton5");
        butBuscarDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBuscarDoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelImagenLayout.createSequentialGroup()
                        .addComponent(labDniDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtDniDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butBuscarDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagenLayout.createSequentialGroup()
                        .addComponent(labFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))))
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelImagenLayout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addComponent(labFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labDniDoctor)
                        .addComponent(txtDniDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(butBuscarDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelBotonesFuncionales.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 204, 204))); // NOI18N

        butAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconsButtons/butAgregar.png"))); // NOI18N
        butAgregar.setText("Agregar");
        butAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFuncionalesActionPerformed(evt);
            }
        });

        butEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconsButtons/butEliminar.png"))); // NOI18N
        butEliminar.setText("Eliminar");
        butEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFuncionalesActionPerformed(evt);
            }
        });

        butLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconsButtons/butLimpiar.png"))); // NOI18N
        butLimpiar.setText("Limpiar");
        butLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butFuncionalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesFuncionalesLayout = new javax.swing.GroupLayout(panelBotonesFuncionales);
        panelBotonesFuncionales.setLayout(panelBotonesFuncionalesLayout);
        panelBotonesFuncionalesLayout.setHorizontalGroup(
            panelBotonesFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesFuncionalesLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(butAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonesFuncionalesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(butLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        panelBotonesFuncionalesLayout.setVerticalGroup(
            panelBotonesFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesFuncionalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesFuncionalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butLimpiar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labCabecera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(panelDatosPersonales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelBotonesFuncionales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(58, 58, 58))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelBotonesFuncionales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelDatosPersonales, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73))
        );
    }// </editor-fold>//GEN-END:initComponents

    //Bot√≥n Examinar con su JFileChooser
    private void butBuscarDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBuscarDoctorActionPerformed

        ElegirDoctor_GUI panelElegirDoctor = new ElegirDoctor_GUI((JFrame) SwingUtilities.getWindowAncestor(this), true, this);
        panelElegirDoctor.setVisible(false);
        panelElegirDoctor.setSize(600, 410);
        panelElegirDoctor.mostrar();
    }//GEN-LAST:event_butBuscarDoctorActionPerformed

    //Carga todos los Doctores en la JTable
    private void mostrarListadoServicios() {
        try {
            limpiarTabla();
            tabServicios.setModel(tabModel);
            tServicios = new ArrayList<>();
            LogicaServicio.listadoServicio(tServicios);

            for (Servicio s : tServicios) {
                tabModel.addRow(new Object[]{
                    s.getId(),
                    s.getNombre(),
                    s.getPrecio(),
                    s.getDniDoctor()
                });
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }

    //Limpia la tabla
    private void limpiarTabla() {
        int cantidadFilas = tabModel.getRowCount();

        if (cantidadFilas != 0) {
            for (int i = cantidadFilas - 1; i >= 0; i--) {
                tabModel.removeRow(i);
            }
        }
    }

    //Limpia todos los campos
    private void limpiarCampos() {
        try {
            txtID.setText(String.valueOf(LogicaServicio.conseguirID()));
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        txtNombre.setText("");
        txtNombre.setBackground(Color.white);
        txtPrecio.setText("");
        txtPrecio.setBackground(Color.white);
        txtDniDoctor.setText("");
        labFoto.setIcon(null);
        labFoto.setText("");
    }

    //¬øFaltan datos obligatorios?
    private String faltanDatosObligatorios() {

        String datosObligatorios = "";

        if (txtNombre.getText().equals("")) {
            datosObligatorios += "\nNombre";
            txtNombre.setBackground(new Color(255, 0, 0, 65));
        } else {
            txtNombre.setBackground(Color.white);
        }

        if (txtPrecio.getText().equals("")) {
            datosObligatorios += "\nPrecio";
            txtPrecio.setBackground(new Color(255, 0, 0, 65));
        } else {
            txtPrecio.setBackground(Color.white);
        }
        return datosObligatorios;
    }

    //M√©todos de los botones funcionales Agregar, Eliminar y Limpiar
    private void butFuncionalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butFuncionalesActionPerformed

        if (evt.getSource() == butAgregar) {
            try {

                String datosObligatorios = faltanDatosObligatorios();

                if (!datosObligatorios.equals("")) {
                    JOptionPane.showMessageDialog(this,
                            "Error. Faltan datos obligatorios!!" + datosObligatorios,
                            getName(),
                            JOptionPane.WARNING_MESSAGE);
                } else {

                    Servicio s = new Servicio();
                    s.setId(Integer.parseInt(txtID.getText()));
                    s.setNombre(txtNombre.getText());
                    s.setPrecio(Double.parseDouble(txtPrecio.getText()));
                    s.setDniDoctor(txtDniDoctor.getText());

                    boolean existeServicio = LogicaServicio.existeServicio(s);

                    if (existeServicio) {

                        int op = JOptionPane.showConfirmDialog(this,
                                "¬ø¬øATENCI√ìN. ID ya registrado. Quiere sobreescribir los datos??",
                                getName(),
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE);

                        switch (op) {
                            case JOptionPane.YES_OPTION:
                                LogicaServicio.editarServicio(s);

                                JOptionPane.showMessageDialog(this,
                                        "Edici√≥n de servicio correcta!!",
                                        getName(),
                                        JOptionPane.INFORMATION_MESSAGE);
                                limpiarCampos();
                                break;

                        }
                    } else {
                        LogicaServicio.altaServicio(s);
                        limpiarCampos();

                        JOptionPane.showMessageDialog(this,
                                "Alta de servicio correcta!!",
                                getName(),
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (Exception ex) {
                System.out.println(
                        ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        ex.getMessage(),
                        getName(),
                        JOptionPane.WARNING_MESSAGE);
            }
            mostrarListadoServicios();
        } else if (evt.getSource() == butEliminar) {
            Servicio s = new Servicio();
            s.setId(Integer.parseInt(txtID.getText()));

            if (tabServicios.getSelectedRowCount() != 0) {
                try {
                    boolean existeServicio = LogicaServicio.existeServicio(s);

                    if (existeServicio) {
                        LogicaServicio.bajaServicio(s);
                        JOptionPane.showMessageDialog(this,
                                "Baja de servicio correcta. ID: " + s.getId(),
                                getName(),
                                JOptionPane.WARNING_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "ERROR. No existe ning√∫n servicio con este ID: " + s.getId(),
                                getName(),
                                JOptionPane.WARNING_MESSAGE);
                    }
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane.showMessageDialog(this,
                            ex.getMessage(),
                            getName(),
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this,
                        "ERROR. No hay ning√∫n servicio seleccionado!!",
                        getName(),
                        JOptionPane.WARNING_MESSAGE);
            }
            limpiarCampos();
            mostrarListadoServicios();
        } else if (evt.getSource() == butLimpiar) {
            limpiarCampos();
            mostrarListadoServicios();
        }
    }//GEN-LAST:event_butFuncionalesActionPerformed

    //Carga los datos desde la fila del JTable seleccionada a los JTextField
    private void cargarServicio(Servicio s) {
        limpiarCampos();
        txtID.setText(String.valueOf(s.getId()));
        txtNombre.setText(s.getNombre());
        txtPrecio.setText(String.valueOf(s.getPrecio()));

        if (s.getDniDoctor() != null) {
            Doctor d = new Doctor();
            d.setDni(s.getDniDoctor());
            try {
                d = LogicaDoctor.getDoctor(d);
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
            }
            txtDniDoctor.setText(s.getDniDoctor());

            if (d.getRutaFoto() != null) {
                Image img = new ImageIcon((d).getRutaFoto()).getImage();
                ImageIcon img2 = new ImageIcon(img.getScaledInstance(100, 100, Image.SCALE_SMOOTH));
                labFoto.setIcon(img2);
            } else {
                labFoto.setIcon(null);
                labFoto.setText("No Imagen!!");
            }
        } else {
            labFoto.setIcon(null);
            txtDniDoctor.setText("");
        }
    }

    //Diferentes eventos para cargar los doctores dentro del JTable
    private void tabServiciosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabServiciosMousePressed
        int i = tabServicios.getSelectedRow();
        Servicio s = tServicios.get(i);
        cargarServicio(s);
    }//GEN-LAST:event_tabServiciosMousePressed

    private void tabServiciosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabServiciosKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int i = tabServicios.getSelectedRow();
            Servicio s = tServicios.get(i);
            cargarServicio(s);
        }
    }//GEN-LAST:event_tabServiciosKeyReleased

    @Override
    public void panelDeLlamada(Object o) {

        if (o instanceof Doctor) {
            txtDniDoctor.setText(((Doctor) o).getDni());
            if (((Doctor) o).getRutaFoto() != null) {
                Image img = new ImageIcon(((Doctor) o).getRutaFoto()).getImage();
                ImageIcon img2 = new ImageIcon(img.getScaledInstance(100, 100, Image.SCALE_SMOOTH));
                labFoto.setIcon(img2);
            } else {
                labFoto.setIcon(null);
                labFoto.setText("No Imagen!!");
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAgregar;
    private javax.swing.JButton butBuscarDoctor;
    private javax.swing.JButton butEliminar;
    private javax.swing.JButton butLimpiar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labCabecera;
    private javax.swing.JLabel labDniDoctor;
    private javax.swing.JLabel labFoto;
    private javax.swing.JLabel labID;
    private javax.swing.JLabel labNombre;
    private javax.swing.JLabel labPrecio;
    private javax.swing.JPanel panelBotonesFuncionales;
    private javax.swing.JPanel panelDatosPersonales;
    private javax.swing.JPanel panelImagen;
    private javax.swing.JTable tabServicios;
    private javax.swing.JTextField txtDniDoctor;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables
}
